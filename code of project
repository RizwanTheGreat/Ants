#include <iostream>
#include <vector>
#include <string>
#include <memory>
#include <map>
#include <cstdlib>
#include <ctime>
#include <sstream>

using namespace std;

class Ant;
class AntFarm;
class Meadow;
class AntRoom;

class Meadow {
private:
    static Meadow* instance;
    vector<shared_ptr<AntFarm>> antFarms;
    int speciesCount;

    Meadow() {
        speciesCount = (rand() % 6) + 10;
    }

public:
    static Meadow* getInstance() {
        if (!instance) {
            instance = new Meadow();
        }
        return instance;
    }

    void spawnAntFarm(int x, int y, const string& species);
    void giveResources(int farmId, const string& resource, int amount);
    void tick(int ticks = 1);
    void summary(int farmId);
};

Meadow* Meadow::instance = nullptr;

class Ant {
protected:
    string species;
    int health;
    int kills;

public:
    Ant(string species) : species(species), health(100), kills(0) {}
    virtual void performAction() = 0;
    virtual string getSpecies() { return species; }
    virtual int getHealth() { return health; }
    virtual void addKill() { kills++; }
    virtual int getKills() { return kills; }
};

class WorkerAnt : public Ant {
public:
    WorkerAnt() : Ant("Worker") {}
    void performAction() override {
        cout << "Worker ant is foraging for food." << endl;
    }
};

class WarriorAnt : public Ant {
public:
    WarriorAnt() : Ant("Warrior") {}
    void performAction() override {
        cout << "Warrior ant is hunting." << endl;
    }
};

class QueenAnt : public Ant {
public:
    QueenAnt() : Ant("Queen") {}
    void performAction() override {
        cout << "Queen ant is spawning eggs." << endl;
    }
};

class AntRoom {
public:
    virtual shared_ptr<Ant> createAnt(const string& type) = 0;
};

class WorkerRoom : public AntRoom {
public:
    shared_ptr<Ant> createAnt(const string& type) override {
        if (type == "worker") return make_shared<WorkerAnt>();
        if (type == "warrior") return make_shared<WarriorAnt>();
        if (type == "queen") return make_shared<QueenAnt>();
        return nullptr;
    }
};

class AntFarm {
private:
    vector<shared_ptr<Ant>> ants;
    shared_ptr<AntRoom> room;
    int food;
    int id;
    static int nextId;

public:
    AntFarm() : food(0), id(nextId++) {
        room = make_shared<WorkerRoom>();
    }

    int getId() const { return id; }

    void spawnAnt(const string& type) {
        auto ant = room->createAnt(type);
        if (ant) {
            ants.push_back(ant);
            cout << type << " ant spawned in farm " << id << "." << endl;
        } else {
            cout << "Invalid ant type: " << type << endl;
        }
    }

    void addFood(int amount) {
        food += amount;
        cout << "Food added to farm " << id << ". Total food: " << food << endl;
    }

    void tick() {
        for (auto& ant : ants) {
            ant->performAction();
        }
    }

    void summary() const {
        cout << "Ant Farm Summary (Farm " << id << "):" << endl;
        for (auto& ant : ants) {
            cout << ant->getSpecies() << " - Kills: " << ant->getKills() << endl;
        }
    }
};

int AntFarm::nextId = 1;

void Meadow::spawnAntFarm(int x, int y, const string& species) {
    auto farm = make_shared<AntFarm>();
    antFarms.push_back(farm);
    cout << "Ant farm spawned at (" << x << ", " << y << ") with species: " << species << endl;
}

void Meadow::giveResources(int farmId, const string& resource, int amount) {
    for (auto& farm : antFarms) {
        if (farm->getId() == farmId) {
            if (resource == "food") {
                farm->addFood(amount);
                return;
            }
            cout << "Resource type not recognized." << endl;
            return;
        }
    }
    cout << "Farm with ID " << farmId << " not found." << endl;
}

void Meadow::tick(int ticks) {
    for (int i = 0; i < ticks; ++i) {
        for (auto& farm : antFarms) {
            farm->tick();
        }
    }
}

void Meadow::summary(int farmId) {
    for (auto& farm : antFarms) {
        if (farm->getId() == farmId) {
            farm->summary();
            return;
        }
    }
    cout << "Farm with ID " << farmId << " not found." << endl;
}

void commandLineInterface() {
    Meadow* meadow = Meadow::getInstance();
    string command;

    while (true) {
        cout << "> ";
        getline(cin, command);
        if (command == "exit") break;

        istringstream iss(command);
        string action;
        iss >> action;

        if (action == "spawn") {
            int x, y;
            string species;
            if (iss >> x >> y >> species) {
                meadow->spawnAntFarm(x, y, species);
            } else {
                cout << "Usage: spawn <x> <y> <species>" << endl;
            }
        } else if (action == "give") {
            int farmId, amount;
            string resource;
            if (iss >> farmId >> resource >> amount) {
                meadow->giveResources(farmId, resource, amount);
            } else {
                cout << "Usage: give <farmId> <resource> <amount>" << endl;
            }
        } else if (action == "tick") {
            int ticks = 1;
            if (iss >> ticks) {
                meadow->tick(ticks);
            } else {
                meadow->tick();
            }
            cout << "Performed " << ticks << " tick(s)." << endl;
        } else if (action == "summary") {
            int farmId;
            if (iss >> farmId) {
                meadow->summary(farmId);
            } else {
                cout << "Usage: summary <farmId>" << endl;
            }
        } else {
            cout << "Unknown command. Try again." << endl;
        }
    }
}

int main() {
    srand(static_cast<unsigned int>(time(nullptr)));
    commandLineInterface();
    return 0;
}
